{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c89452cb-3ea6-4dce-83d9-9e66afbabe2e",
   "metadata": {},
   "source": [
    "Q1. What is the Probability density function?\n",
    "\n",
    "Ans. The Probability Density Function(PDF) defines the probability function representing the density of a continuous random variable lying between a specific range of values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f25e0de8-e4dd-4ef1-8d55-77a266ab4e51",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "4ad2197e-100d-45bc-936f-8d9eb5c897b3",
   "metadata": {},
   "source": [
    "Q2. What are the types of Probability distribution?\n",
    "\n",
    "Ans. There are two types of probability distribution \n",
    "\n",
    "     1. Probability mass function (PMF)\n",
    "     \n",
    "     2. Probability density function (PDF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfcb81ba-c9b0-46ff-b5c4-0cd93f77f8d3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f86433ad-001d-4a53-828e-8c034e28592b",
   "metadata": {},
   "source": [
    "Q3. Write a Python function to calculate the probability density function of a normal distribution with\n",
    "given mean and standard deviation at a given point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2b9fdf77-c5e5-42df-bd55-30df2474e853",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0804410163156249\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import norm \n",
    "import numpy as np \n",
    "\n",
    "data_start = -5\n",
    "data_end = 5\n",
    "data_points = 11\n",
    "data = np.linspace(data_start, data_end, data_points) \n",
    "\n",
    "mean = np.mean(data) \n",
    "std = np.std(data) \n",
    "\n",
    "probability_pdf = norm.pdf(3, loc=mean, scale=std) \n",
    "print(probability_pdf) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c66dd2a6-9a78-40ee-9fbf-d61151980899",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "db3f2b58-5282-4841-80f6-fd373193afad",
   "metadata": {},
   "source": [
    "Q4. What are the properties of Binomial distribution? Give two examples of events where binomial\n",
    "distribution can be applied.\n",
    "\n",
    "   #The properties of the binomial distribution are:\n",
    "\n",
    "     1.There are two possible outcomes: true or false, success or failure, yes or no.\n",
    "\n",
    "     2.There is ‘n’ number of independent trials or a fixed number of n times repeated trials.\n",
    "\n",
    "     3. The probability of success or failure remains the same for each trial.\n",
    "\n",
    "     4. Only the number of success is calculated out of n independent trials.\n",
    "\n",
    "     5. Every trial is an independent trial, which means the outcome of one trial does not affect the outcome of another trial.\n",
    " \n",
    "\n",
    "\n",
    "\n",
    "#The concept is used for:\n",
    "\n",
    "   1.Finding the quantity of raw and used materials while making a product.\n",
    "\n",
    "   2.Taking a survey of positive and negative reviews from the public for any specific product or place."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "447cf49f-2090-41fa-a84b-0bb957770505",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6f2db368-6ae3-4082-911b-b9956a37dbf0",
   "metadata": {},
   "source": [
    "Q5. Generate a random sample of size 1000 from a binomial distribution with probability of success 0.4\n",
    "and plot a histogram of the results using matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0445adef-6dae-4a61-b47a-b54272289666",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Parameters\n",
    "n = 1000  # sample size\n",
    "p = 0.4   # probability of success\n",
    "trials = 10  # number of trials\n",
    "\n",
    "# Generate random sample\n",
    "sample = np.random.binomial(trials, p, n)\n",
    "\n",
    "# Plot histogram\n",
    "plt.hist(sample, bins=range(trials+2), edgecolor='black', align='left')\n",
    "plt.title('Histogram of Binomial Distribution')\n",
    "plt.xlabel('Number of Successes')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ecceeaf-05e9-4e14-bb20-12081d1a41d1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e93220d7-d8c9-4f7a-99c0-caf6e80711d2",
   "metadata": {},
   "source": [
    "Q6. Write a Python function to calculate the cumulative distribution function of a Poisson distribution\n",
    "with given mean at a given point.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f417a246-8ce4-49a7-8d5d-5354e4d89a0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The CDF of Poisson distribution with mean 3.0 at point 5 is 0.9160820579686966\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def poisson_cdf(mean, k):\n",
    "    \"\"\"\n",
    "    Calculate the cumulative distribution function of a Poisson distribution.\n",
    "\n",
    "    Parameters:\n",
    "    mean (float): The mean (λ) of the Poisson distribution.\n",
    "    k (int): The point at which to evaluate the CDF.\n",
    "\n",
    "    Returns:\n",
    "    float: The CDF value at point k.\n",
    "    \"\"\"\n",
    "    cdf = 0.0\n",
    "    for i in range(k + 1):\n",
    "        cdf += (math.exp(-mean) * mean**i) / math.factorial(i)\n",
    "    return cdf\n",
    "\n",
    "# Example usage\n",
    "mean = 3.0\n",
    "k = 5\n",
    "print(f\"The CDF of Poisson distribution with mean {mean} at point {k} is {poisson_cdf(mean, k)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "540c7b42-0dcb-4b50-b624-e720bb467097",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c9e7ef0a-dfaf-44c7-886b-dda4d2171eb1",
   "metadata": {},
   "source": [
    "Q7. How Binomial distribution different from Poisson distribution?\n",
    "\n",
    "Ans. The Binomial and Poisson distributions are both discrete probability distributions, but they have different applications and properties. Here’s a comparison to help you understand their differences:\n",
    "\n",
    "Binomial Distribution\n",
    "\n",
    "Definition: Describes the number of successes in a fixed number of independent trials, each with the same probability of success.\n",
    "\n",
    "Parameters:\n",
    "\n",
    "   ( n ): Number of trials\n",
    "\n",
    "   ( p ): Probability of success in each trial\n",
    "\n",
    "\n",
    "Example: Flipping a coin 10 times and counting the number of heads.\n",
    "\n",
    "    Formula:P(X=k)=(kn​)pk(1−p)n−k\n",
    "\n",
    "where ( \\binom{n}{k} ) is the binomial coefficient.\n",
    "\n",
    "Mean and Variance:\n",
    "\n",
    "     Mean: ( \\mu = np )\n",
    "\n",
    "     Variance: ( \\sigma^2 = np(1-p) )\n",
    "\n",
    "\n",
    "Poisson Distribution\n",
    "\n",
    "    Definition: Describes the number of events occurring in a fixed interval of time or space, given the average number of times the event occurs      over that interval.\n",
    "\n",
    "Parameters:\n",
    "\n",
    "( \\lambda ): Average number of events in the interval (mean rate of occurrence)\n",
    "\n",
    "\n",
    "Example: Counting the number of emails received in an hour.\n",
    "\n",
    "      Formula:P(X=k)=k!λke−λ​\n",
    "\n",
    "Mean and Variance:\n",
    "\n",
    "    Mean: ( \\mu = \\lambda )\n",
    " \n",
    "    Variance: ( \\sigma^2 = \\lambda )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16cfd427-4f3e-4667-b4aa-13220b9447c2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "bca28699-b82f-41a8-b8c8-d063b4515c24",
   "metadata": {},
   "source": [
    "Q8. Generate a random sample of size 1000 from a Poisson distribution with mean 5 and calculate the\n",
    "sample mean and variance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ff803dfb-60b1-4898-88df-09ac9b8f4a22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample Mean: 5.057\n",
      "Sample Variance: 5.165750999999999\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Parameters\n",
    "mean = 5\n",
    "sample_size = 1000\n",
    "\n",
    "# Generate random sample\n",
    "sample = np.random.poisson(mean, sample_size)\n",
    "\n",
    "# Calculate sample mean and variance\n",
    "sample_mean = np.mean(sample)\n",
    "sample_variance = np.var(sample)\n",
    "\n",
    "print(f\"Sample Mean: {sample_mean}\")\n",
    "print(f\"Sample Variance: {sample_variance}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e09c414a-82dd-40b3-89c4-f1c6163f1501",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "0e75029d-3927-4f5b-ad41-b5e5f0429c4a",
   "metadata": {},
   "source": [
    "Q9. How mean and variance are related in Binomial distribution and Poisson distribution?\n",
    "\n",
    "Ans. Binomial Distribution\n",
    "\n",
    "    Mean: ( \\mu = np )\n",
    "\n",
    "    Variance: ( \\sigma^2 = np(1-p) )\n",
    "\n",
    "Here, ( n ) is the number of trials, and ( p ) is the probability of success in each trial. The variance depends on both ( n ) and ( p ), and it is always less than the mean unless ( p = 0.5 ).\n",
    "\n",
    "Poisson Distribution\n",
    "\n",
    "    Mean: ( \\mu = \\lambda )\n",
    " \n",
    "    Variance: ( \\sigma^2 = \\lambda )\n",
    "    \n",
    "In the Poisson distribution, ( \\lambda ) is the average rate of occurrence. Interestingly, the mean and variance are equal in a Poisson distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c036f4f-61f9-471e-9934-ee1461bf1009",
   "metadata": {},
   "source": [
    "Q10. In normal distribution with respect to mean position, where does the least frequent data appear?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c5b4202-c131-4f89-b260-fd033146744b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
